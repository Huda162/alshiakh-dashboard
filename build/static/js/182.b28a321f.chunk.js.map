{"version":3,"file":"static/js/182.b28a321f.chunk.js","mappings":"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","sources":["constants/colors.js","hooks/general/useWidth.js","hooks/login/useLogin.js","views/pages/login/Login.js"],"sourcesContent":["export const Theme = {\r\n  base: '#f8f9fa',\r\n  white: '#ffffff',\r\n  primary1: '#832e59',\r\n  primaryLight: '#d4719f',\r\n  transparentPrimary: 'rgba(233, 99, 78, 0.5)',\r\n  primaryRed: '#e55353',\r\n  primaryBlue: '#39f',\r\n  grayDark: '#333333',\r\n  gray: '#767676',\r\n}\r\n","const { useState } = require('react')\r\n\r\nexport const useWidth = () => {\r\n  const [width, setWidth] = useState(window.innerWidth)\r\n\r\n  window.addEventListener('resize', function (event) {\r\n    setWidth(window.innerWidth)\r\n  })\r\n\r\n  return { width }\r\n}\r\n","import { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nexport const useLogin = () => {\r\n  const [phone, setPhone] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n  // const [emptyPhone, setEmptyPhone] = useState(false)\r\n  // const [emptyPassword, setEmptyPassword] = useState(false)\r\n  const [showDialog, setShowDialog] = useState(false)\r\n  const navigate = useNavigate()\r\n  const [showSignoutDialog, setShowSignoutDialog] = useState(false)\r\n  const [rememberMe, setRememberMe] = useState(false)\r\n\r\n  const openSignoutDialog = () => {\r\n    setShowSignoutDialog(true)\r\n  }\r\n\r\n  const closeSignoutDialog = () => {\r\n    setShowSignoutDialog(false)\r\n  }\r\n\r\n  const autoLogin = async () => {\r\n    console.log('inside auto login')\r\n    const phoneNumber = localStorage.getItem('cubra_phone_number')\r\n    const rememberMe = localStorage.getItem('cubra_remember_me')\r\n\r\n    if (rememberMe === 'true') {\r\n      console.log('setting login info in session storage')\r\n      setLoading(true)\r\n      const name = localStorage.getItem('cubra_name')\r\n      const role_id = localStorage.getItem('cubra_role_id')\r\n      const id = localStorage.getItem('cubra_id')\r\n      const log_status = localStorage.getItem('cubra_log_status')\r\n      const token = localStorage.getItem('cubra_access_token')\r\n\r\n      sessionStorage.setItem('access_token', JSON.parse(token))\r\n      sessionStorage.setItem('name', JSON.parse(name))\r\n      sessionStorage.setItem('role_id', JSON.parse(role_id))\r\n      sessionStorage.setItem('id', JSON.parse(id))\r\n      sessionStorage.setItem('log_status', JSON.parse(log_status))\r\n\r\n      navigate('/dashboard')\r\n\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    sessionStorage.removeItem('access_token')\r\n    sessionStorage.removeItem('name')\r\n    sessionStorage.removeItem('role_id')\r\n    sessionStorage.removeItem('id')\r\n    sessionStorage.setItem('log_status', false)\r\n    localStorage.removeItem('cubra_access_token')\r\n    localStorage.removeItem('cubra_name')\r\n    localStorage.removeItem('cubra_role_id')\r\n    localStorage.removeItem('cubra_id')\r\n    localStorage.setItem('cubra_log_status', JSON.stringify(false))\r\n    localStorage.setItem('cubra_remember_me', JSON.stringify(false))\r\n    navigate('/#')\r\n    setShowSignoutDialog(false)\r\n  }\r\n  const login = async () => {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    }\r\n\r\n    try {\r\n      setLoading(true)\r\n      const response = await axios.post(\r\n        `https://perfectadv.ps/biofresh/api/login`,\r\n        {\r\n          phone: phone,\r\n          password: password,\r\n        },\r\n        { headers },\r\n      )\r\n      console.log(response)\r\n      if (response.status === 200) {\r\n        // Successful login\r\n        const token = response.data.access_token\r\n        const status = response.data.status\r\n        const { name, role_id, id } = response.data.id\r\n        console.log(role_id)\r\n        sessionStorage.setItem('access_token', token)\r\n        sessionStorage.setItem('name', name)\r\n        sessionStorage.setItem('role_id', role_id)\r\n        sessionStorage.setItem('id', id)\r\n        sessionStorage.setItem('log_status', status)\r\n        if (rememberMe) {\r\n          localStorage.setItem('cubra_access_token', JSON.stringify(token))\r\n          localStorage.setItem('cubra_name', JSON.stringify(name))\r\n          localStorage.setItem('cubra_role_id', JSON.stringify(role_id))\r\n          localStorage.setItem('cubra_id', JSON.stringify(id))\r\n          localStorage.setItem('cubra_log_status', JSON.stringify(status))\r\n          localStorage.setItem('cubra_remember_me', JSON.stringify(rememberMe))\r\n        }\r\n        navigate('/dashboard')\r\n      } else {\r\n        console.log('Invalid login details')\r\n      }\r\n    } catch (error) {\r\n      setShowDialog(true)\r\n      console.error(error)\r\n      setLoading(false)\r\n    }\r\n    // }\r\n  }\r\n  return {\r\n    phone,\r\n    setPhone,\r\n    password,\r\n    setPassword,\r\n    loading,\r\n    showDialog,\r\n    setShowDialog,\r\n    login,\r\n    logout,\r\n    openSignoutDialog,\r\n    closeSignoutDialog,\r\n    showSignoutDialog,\r\n    rememberMe,\r\n    setRememberMe,\r\n    autoLogin,\r\n  }\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CFormCheck,\r\n  CFormInput,\r\n  CRow,\r\n} from '@coreui/react'\r\nimport { Spinner } from 'react-bootstrap/esm'\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, Button } from '@mui/material'\r\nimport { useLogin } from 'src/hooks/login/useLogin'\r\nimport { Theme } from 'src/constants/colors'\r\nimport logo from '../../../assets/images/logo.png'\r\nimport dashboard from '../../../assets/images/dashboard.png'\r\nimport '../../../components/test.css'\r\nimport '../../../layout/layout.css'\r\nimport { useWidth } from 'src/hooks/general/useWidth'\r\n\r\nconst Login = () => {\r\n  const {\r\n    phone,\r\n    setPhone,\r\n    password,\r\n    setPassword,\r\n    loading,\r\n    showDialog,\r\n    setShowDialog,\r\n    login,\r\n    rememberMe,\r\n    setRememberMe,\r\n    autoLogin,\r\n  } = useLogin()\r\n\r\n  useEffect(() => {\r\n    autoLogin()\r\n  })\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      login()\r\n    }\r\n  }\r\n\r\n  const { width } = useWidth()\r\n\r\n  return (\r\n    <div className=\"bg-light w-100 h-100 min-vh-100 d-flex almarai-regular\" dir=\"rtl\">\r\n      <CContainer className=\"d-flex align-items-center justify-content-center w-100 h-100\">\r\n        <CRow className=\"w-100 h-100\">\r\n          <CCol\r\n            sm={width > 768 ? 6 : 12}\r\n            className={\r\n              width > 768\r\n                ? 'rounded d-flex flex-column justify-content-center align-items-center px-5'\r\n                : 'rounded d-flex flex-column justify-content-center align-items-center h-100'\r\n            }\r\n            style={\r\n              width > 768\r\n                ? {\r\n                    backgroundColor: Theme.white,\r\n                    boxShadow: '0px 2px 3px #c8c8c8',\r\n                    border: 'none',\r\n                    height: '100vh',\r\n                    position: 'absolute',\r\n                    left: '0px',\r\n                  }\r\n                : {\r\n                    backgroundColor: Theme.white,\r\n                    boxShadow: '0px 2px 3px #c8c8c8',\r\n                    border: 'none',\r\n                    height: '100vh',\r\n                    position: 'absolute',\r\n                    // left: '0px',\r\n                  }\r\n            }\r\n          >\r\n            <CCard\r\n              className={\r\n                width > 768\r\n                  ? 'rounded w-75 m-3 d-flex flex-column justify-content-center align-items-center p-5'\r\n                  : 'rounded w-75 d-flex flex-column justify-content-center align-items-center p-3'\r\n              }\r\n              style={{\r\n                border: 'none',\r\n              }}\r\n            >\r\n              <img src={logo} alt=\"Logo\" width={300} />\r\n              <CForm onKeyPress={handleKeyPress} className=\"w-100\">\r\n                <CRow className=\" my-2\">\r\n                  <h1 className=\"text-center almarai-bold\">تسجيل الدخول</h1>\r\n                </CRow>\r\n                <CRow className=\" my-2\" sm={width < 768 ? 12 : ''}>\r\n                  <CFormInput\r\n                    placeholder=\"رقم الهاتف\"\r\n                    autoComplete=\"username\"\r\n                    id=\"phone\"\r\n                    value={phone}\r\n                    onChange={(e) => {\r\n                      setPhone(e.target.value)\r\n                    }}\r\n                  />\r\n                </CRow>\r\n                <CRow className=\"my-2\">\r\n                  <CFormInput\r\n                    value={password}\r\n                    onChange={(e) => {\r\n                      setPassword(e.target.value)\r\n                    }}\r\n                    type=\"password\"\r\n                    placeholder=\"كلمة المرور\"\r\n                    autoComplete=\"current-password\"\r\n                  />\r\n                </CRow>\r\n                <CRow>\r\n                  <CCol md={5} className=\"d-flex align-items-center\">\r\n                    <CFormCheck\r\n                      id=\"rememberMe\"\r\n                      label=\"تذكرني\"\r\n                      reverse\r\n                      className=\"customCheckbox\"\r\n                      checked={rememberMe}\r\n                      onChange={() => setRememberMe(!rememberMe)}\r\n                    />\r\n                  </CCol>\r\n                  <CCol md={7} className=\"d-flex justify-content-end p-0\">\r\n                    <CButton color=\"white\">هل نسيت كلمة المرور؟</CButton>\r\n                  </CCol>\r\n                </CRow>\r\n                {loading ? (\r\n                  <Spinner animation=\"border\" role=\"status\" style={{ margin: '10px' }}>\r\n                    <span className=\"visually-hidden\">Loading...</span>\r\n                  </Spinner>\r\n                ) : (\r\n                  <CRow className=\" my-3\">\r\n                    <CButton\r\n                      style={{ backgroundColor: Theme.primary1, border: 'none' }}\r\n                      onClick={() => {\r\n                        login()\r\n                      }}\r\n                      disabled={password.trim() === '' || phone.trim() === ''}\r\n                    >\r\n                      تسجيل الدخول\r\n                    </CButton>\r\n                  </CRow>\r\n                )}\r\n              </CForm>\r\n            </CCard>\r\n          </CCol>\r\n          {width > 768 && (\r\n            <CCol\r\n              md={6}\r\n              className=\"trapezoid d-flex flex-column justify-content-center align-items-center text-white\"\r\n              style={{\r\n                backgroundColor: Theme.primary1,\r\n                boxShadow: '0px 2px 3px #c8c8c8',\r\n                border: 'none',\r\n                padding: 15,\r\n                height: '100vh',\r\n              }}\r\n            >\r\n              <h1>Al Shiakh Dashboard</h1>\r\n              {/* <p>لوحة التحكم</p> */}\r\n              <img src={dashboard} alt=\"login\" width={500} />\r\n            </CCol>\r\n          )}\r\n        </CRow>\r\n        <Dialog open={showDialog} onClose={() => setShowDialog(false)}>\r\n          <DialogTitle>رقم الهاتف أو كلمة المرور غير صحيحة. حاول مرة اخرى</DialogTitle>\r\n          <DialogContent></DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setShowDialog(false)}>حسناً</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </CContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n"],"names":["Theme","base","white","primary1","primaryLight","transparentPrimary","primaryRed","primaryBlue","grayDark","gray","useState","require","useWidth","width","setWidth","window","innerWidth","addEventListener","event","useLogin","phone","setPhone","password","setPassword","loading","setLoading","showDialog","setShowDialog","navigate","useNavigate","showSignoutDialog","setShowSignoutDialog","rememberMe","setRememberMe","login","async","headers","response","axios","console","log","status","token","data","access_token","name","role_id","id","sessionStorage","setItem","localStorage","JSON","stringify","error","logout","removeItem","openSignoutDialog","closeSignoutDialog","autoLogin","getItem","log_status","parse","Login","useEffect","_jsx","className","dir","children","_jsxs","CContainer","CRow","CCol","sm","style","backgroundColor","boxShadow","border","height","position","left","CCard","src","logo","alt","CForm","onKeyPress","e","key","CFormInput","placeholder","autoComplete","value","onChange","target","type","md","CFormCheck","label","reverse","checked","CButton","color","Spinner","animation","role","margin","onClick","disabled","trim","padding","dashboard","Dialog","open","onClose","DialogTitle","DialogContent","DialogActions","Button"],"sourceRoot":""}